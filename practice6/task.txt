Написать программу, в которой обрабатываются личные данные сотрудников
некой компании. Сотрудники получают зарплату в конце месяца с учётом выполненных
заданий. Каждое задание занимает N часов работы. Соответственно гонорар за
выполненный таск рассчитывается с учётом занимаемых часов. (формулу можете
придумать сами).
Программа должна содержать следующие функции:
1. Ввод нового сотрудника вручную;
2. Добавление сотрудника из случайных данных:
- Отдельные три массива имён, фамилий и отчества откуда
формируется ФИО;
- Дата рождения;
- Массив должностей (без генерального директора и т.п);
- Город проживания;
- Список заданий (тоже формируются случайным образом).
3. Добавление заданий;
4. Просмотр списка выполненных и открытых заданий;
5. Вывод топ-3 сотрудников по выполнению заданий в месяц;
6. Вывод задания с наибольшим гонораром за выполнение;
7. Формирование отчёта о выполненных заданиях за месяц и сохранение его
в текстовый файл;
8. Сохранение списка сотрудников в файл;
● Желательно, чтобы текст не был однотонным (но в меру! “Вырвиглазное”
оформление считается за невыполненную работу);

Автологирование
В начале работы программы запускается отдельный поток для автоматической
записи всех действий в программе с помощью классов FileWriter и
BufferedWriter в текстовый файл, пример записи действия в файле:
[“НАЗВАНИЕ_КЛАССА”][“НАЗВАНИЕ_МЕТОДА”] Пользователь ввёл
следующие данные:
[“НАЗВАНИЕ_КЛАССА”][“НАЗВАНИЕ_МЕТОДА”] Произошла ошибка, см.
описание: (далее вывод stacktrace из блока catch в обработке исключений)
Очевидно, что логировать каждое действие пользователя не нужно.
Поток засыпает на 5 секунд и после чего производит перезапись файла новыми
данными.
Использование Optional<T> вместо обработки NullPointerException
При обработки функций, которые потенциально могут вернуть null (например,
поиск конкретного объекта в массиве), получать данные через метод .get(), либо
использовать .ifPresentOrElse() если требуется провести вывод/обработку.
Использование try-catch-finally для обработки NPE – запрещено
